TC01: Add New Task with Valid Input (Positive)
Objective:
Verify that the user can successfully add a new task with valid text input.
Preconditions:
The TodoApp is running and the task input field is empty.
Test Steps:
1. Launch the TodoApp in a supported browser.
2. Enter a valid task description (e.g., “Buy groceries”) into the input field.
3. Submit the task by clicking the add button or pressing the Enter key.
Expected Results:
* The new task is added at the top of the task list and immediately visible in the UI.
* The task is saved in localStorage.
* A toast notification appears confirming the task was added successfully.
* The input field is cleared after submission.

TC02: Edit Existing Task Text (Positive)
Objective:
Ensure the user can edit the text of an existing task.
Preconditions:
At least one task exists in the TodoApp.
Test Steps:
1. Locate an existing task in the list.
2. Click the edit button/icon associated with the task.
3. Modify the task text (e.g., change “Buy groceries” to “Buy fresh groceries”).
4. Save the changes.
Expected Results:
• The task text is updated immediately in the UI.
• The updated task text is saved in localStorage.
• A toast notification confirms the task update.

TC03: Toggle Task Completion Status (Positive)
Objective:
Verify that a user can mark a task as completed or revert it to active.
Preconditions:
At least one task exists in the TodoApp.
Test Steps:
1. Locate a task in the list.
2. Click the completion checkbox associated with the task.
Expected Results:
• The task’s completion status toggles correctly.
• The UI reflects the change visually (e.g., strikethrough or faded text).
• The completion status is saved in localStorage.
• A toast notification confirms the status change.

TC04: Delete a Task (Positive)
Objective:
Verify the user can delete a task from the list.
Preconditions:
At least one task exists in the TodoApp.
Test Steps:
1. Select a task to delete.
2. Click the delete button/icon for the selected task.
Expected Results:
• The task is removed immediately from the list in the UI.
• The task is removed from localStorage.
• A toast notification confirms the deletion.

TC05: Filter Tasks by “Active” (Positive)
Objective:
Verify that selecting the “Active” filter displays only incomplete tasks.
Preconditions:
There are both completed and active tasks in the list.
Test Steps:
1. Click the “Active” filter button.
Expected Results:
• Only tasks that are not marked as completed are displayed.
• The count badges update to reflect the current visible tasks.
• UI updates promptly without errors or delays.

TC06: Add Empty or Whitespace-Only Task (Negative)
Objective:
Ensure the app prevents adding a task with empty or whitespace-only input.
Preconditions:
TodoApp is running, input field is empty.
Test Steps:
1. Leave the input field empty or enter only whitespace characters (spaces, tabs).
2. Attempt to submit the task by clicking the add button or pressing Enter.
Expected Results:
• The task is NOT added to the list.
• The input field is cleared or remains unchanged (depending on implementation).
• No toast notification is shown.
• Optionally, a validation message is displayed indicating invalid input.

TC07: Edit Task to Empty or Whitespace-Only Text (Negative)
Objective:
Verify that editing a task to an empty or whitespace-only string is not allowed.
Preconditions:
At least one existing task in the TodoApp.
Test Steps:
1. Select a task and enter edit mode.
2. Replace the task text with an empty string or whitespace characters.
3. Attempt to save the changes.
Expected Results:
• The edit operation is rejected.
• The original task text remains unchanged.
• A validation message may be displayed informing the user of invalid input.
• No toast notification is shown.

TC08: Delete Task When Task List is Empty (Negative)
Objective:
Verify the app gracefully handles delete actions when no tasks are present.
Preconditions:
The task list is empty.
Test Steps:
1. Attempt to delete a task (e.g., via UI or shortcut if available).
Expected Results:
• No errors, exceptions, or crashes occur.
• The UI remains stable and displays the empty state message.
• No toast notification is shown.

TC09: Load Corrupted or Invalid Data from localStorage (Negative)
Objective:
Verify the app handles corrupted or invalid data in localStorage without crashing.
Preconditions:
Inject corrupted JSON or invalid data under the todos key in browser’s localStorage.
Test Steps:
1. Corrupt the todos data in localStorage manually (e.g., malformed JSON).
2. Reload the TodoApp.
Expected Results:
• The app handles the error gracefully without crashing.
• An empty task list or appropriate error message is displayed.
• The corrupted data is either ignored or reset.

TC10: Apply Filter Resulting in No Matching Tasks (Negative)
Objective:
Verify the UI behavior when selecting a filter that matches no tasks.
Preconditions:
At least one filter option will result in zero visible tasks (e.g., "Completed" when no tasks are completed).
Test Steps:
1. Select the filter that yields no matching tasks.
Expected Results:
• The task list displays an empty state message indicating no tasks found.
• The UI remains stable without glitches or errors.
• No toast notifications are triggered.
